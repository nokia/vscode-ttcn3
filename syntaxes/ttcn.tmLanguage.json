{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "TTCN-3",
    "patterns": [
        {
            "include": "#expressions"
        },
        {
            "include": "#statements"
        },
        {
            "include": "#invalid"
        }
    ],
    "repository": {
        "expressions": {
            "patterns": [
                {
                    "include": "#keywords"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#notations"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#symbols"
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "include": "#predefined_types"
                },
                {
                    "comment": "structural keywords",
                    "name": "support.function.module.ttcn",
                    "match": "(?x) \\b(type|module|var|timer|signature|template|function|altstep|testcase)\\b"
                },
                {
                    "comment": "constant keywords",
                    "name": "support.constant.definition.ttcn",
                    "match": "(?x) \\b(const|all)\\b"
                },
                {
                    "comment": "modifier keywords",
                    "name": "support.constant.modifier.ttcn",
                    "match": "(?x) @\\b(abstract|control|decoded|default|deterministic|dynamic|final|fuzzy|index|lazy|local|match|mutation|mutation_o|mutation_unichar|nocase)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(alt|any|apply|assert|at)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(break)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(char|class|component|configuration|conjunct|cont|continue|control)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(deactivate|decmatch|delta|disjunct|display|duration)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(encode|enumerated|except|extends|extension|external)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(finally|finished|friend|from)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(getverdict|goto|group)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(history)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(ifpresent|implies|import|in|inout|interleave|inv)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(label|language)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(message|mixed|mode|modifies|modulepar|mtc)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(noblock|notinv|now|nowait|null)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(object|of|omit|on|onentry|onexit|optional|out|override)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(par|port|present|prev|private|procedure|public)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(realtime|record|recursive|repeat|return|runs)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(self|sender|seq|set|setstate|static|stepsize|stream|system)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(this|timestamp|to)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(unmap|until)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(value|values|variant)\\b"
                },
                {
                    "name": "keyword.other.ttcn",
                    "match": "(?x) \\b(wait|with)\\b"
                }
            ]
        },
        "user-keyword": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.user.ttcn"
                        }
                    },
                    "match": "((?!\\.)([[:alpha:]][[:word:]]*))\\s+((?!\\b(type|module|var|timer|signature|template|function|altstep|testcase|const|all|abstract|decoded|default|deterministic|dynamic|final|fuzzy|index|lazy|local|mutation|mutation_o|mutation_unichar|nocase|address|alt|any|anytype|apply|assert|at|bitstring|boolean|break|char|charstring|class|component|configuration|conjunct|cont|continue|control|deactivate|decmatch|delta|disjunct|display|do|duration|encode|enumerated|except|extends|extension|external|finally|finished|float|friend|from|getverdict|goto|group|hexstring|history|ifpresent|implies|import|in|inout|integer|interleave|inv|label|language|message|mixed|mode|modifies|modulepar|mtc|noblock|notinv|now|nowait|null|object|octetstring|of|omit|on|onentry|onexit|optional|out|override|par|port|present|prev|private|procedure|public|realtime|record|recursive|repeat|return|runs|self|sender|seq|set|setstate|static|stepsize|stream|system|timestamp|to|universal|unmap|until|value|values|variant|verdicttype|wait|with|action|activate|alive|any2unistr|bit2hex|bit2int|bit2oct|bit2str|call|case|catch|char2int|char2oct|check|checkstate|clear|complement|connect|create|decvalue|decvalue_o|decvalue_unichar|disconnect|done|else|encvalue|encvalue_o|encvalue_unichar|enum2int|exception|execute|float2int|for|getcall|getreply|get_stringencoding|halt|hex2bit|hex2int|hex2oct|hex2str|hostid|if|int2bit|int2char|int2enum|int2float|int2hex|int2oct|int2str|int2unichar|isbound|ischosen|ispresent|istemplatekind|isvalue|kill|killed|length|lengthof|log|map|match|oct2bit|oct2char|oct2hex|oct2int|oct2str|oct2unichar|param|pattern|permutation|raise|read|receive|regexp|remove_bom|replace|reply|rnd|running|select|send|setencode|setverdict|sizeof|start|stop|str2float|str2hex|str2int|str2oct|subset|substr|superset|testcasename|this|timeout|trigger|unichar2int|unichar2oct|union|valueof|while|infinity|not_a_number|false|true|pass|fail|inconc|error|none|mod|rem|not|and|or|xor|not4b|and4b|or4b|xor4b)\\b)[[:alpha:]][[:word:]]*)(?=[[:space:]\\)\\}\\]\\,\\;])"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(action|activate|alive|any2unistr)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(bit2hex|bit2int|bit2oct|bit2str)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(call|case|catch|char2int|char2oct|check|checkstate|clear|complement|connect|create)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(decvalue|decvalue_o|decvalue_unichar|disconnect|do|done)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(else|encvalue|encvalue_o|encvalue_unichar|enum2int|exception|execute)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(float2int|for)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(getcall|getreply|get_stringencoding)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(halt|hex2bit|hex2int|hex2oct|hex2str|hostid)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(if|int2bit|int2char|int2enum|int2float|int2hex|int2oct|int2str|int2unichar|isbound|ischosen|ispresent|istemplatekind|isvalue)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(kill|killed)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(length|lengthof|log)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(map|match)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(oct2bit|oct2char|oct2hex|oct2int|oct2str|oct2unichar)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(param|pattern|permutation)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(raise|read|receive|regexp|remove_bom|replace|reply|rnd|running)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(select|send|setencode|setverdict|sizeof|start|stop|str2float|str2hex|str2int|str2oct|subset|substr|superset)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(testcasename|timeout|trigger)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(unichar2int|unichar2oct|union)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(valueof)\\b"
                },
                {
                    "name": "entity.name.method.ttcn",
                    "match": "(?x) \\b(while)\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "comment": "type identifier for (restricted)(var)template def w/ modifier",
                    "match": "(?<=(^|\\b)template\\s*)(\\(\\s*([[:alpha:]]+)\\s*\\))*(\\s+(@[[:alpha:]]+)){0,2}\\s+(universal charstring|[[:alpha:]][[:word:]]*)\\s*(?=[\\s\\[\\:\\;])",
                    "captures": {
                        "3": {
                            "patterns": [
                                {
                                    "include": "#template_restriction"
                                }
                            ]
                        },
                        "5": {
                            "patterns": [
                                {
                                    "include": "#modifier"
                                }
                            ]
                        },
                        "6": {
                            "patterns": [
                                {
                                    "include": "#predefinde_types"
                                },
                                {
                                    "include": "#type_identifier"
                                }
                            ]
                        }
                    }
                },
                {
                    "comment": "type identifier for var decl w/ modifier",
                    "match": "(?<=(^|\\b)var\\b)(?! template\\b)(\\(\\s*([[:alpha:]]+)\\s*\\))*(\\s+@[[:alpha:]]+){0,2}\\s+(universal charstring|[[:alpha:]][[:word:]]*)\\s*(?=[\\s\\[\\:\\;])",
                    "captures": {
                        "3": {
                            "patterns": [
                                {
                                    "include": "#template_restriction"
                                }
                            ]
                        },
                        "5": {
                            "patterns": [
                                {
                                    "include": "#predefinde_types"
                                },
                                {
                                    "include": "#type_identifier"
                                }
                            ]
                        }
                    }
                },
                {
                    "comment": "type identifier for value decls",
                    "match": "(?<=(^|\\b)(const|timer|type))\\s+([[:alpha:]][[:word:]]*)\\s*(?=[\\s\\[\\:\\;])",
                    "captures": {
                        "3": {
                            "patterns": [
                                {
                                    "include": "#predefinde_types"
                                },
                                {
                                    "include": "#type_identifier"
                                }
                            ]
                        }
                    }
                },
                {
                    "comment": "function/testcase/altstep identifier",
                    "name": "entity.name.method.function.ttcn",
                    "match": "(?<=^function|^testcase|^altstep)\\s+((?!interleave)[[:alpha:]][[:word:]]*)(?=[[:space:]\\(\\)\\{\\}\\<\\>\\;])"
                },
                {
                    "comment": "module identifier",
                    "name": "entity.name.function.module.ttcn",
                    "match": "(?<=^from|^module)\\s+([[:alpha:]][[:word:]]*)(?=[[:space:]\\{\\}\\;])"
                },
                {
                    "comment": "module identifier list",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.module.ttcn"
                        },
                        "2": {
                            "name": "entity.name.function.module.ttcn"
                        }
                    },
                    "match": "(?<=^module)\\s+([[:alpha:]][[:word:]]*)\\s*,\\s*([[:alpha:]][[:word:]]*)(?=[[:space:]\\{\\;])"
                },
                {
                    "comment": "function/testcase/altstep identifier",
                    "name": "entity.name.method.function.ttcn",
                    "match": "(?<=[[:^word:]]function|[[:^word:]]testcase|[[:^word:]]altstep)\\s+((?!interleave)[[:alpha:]][[:word:]]*)(?=[[:space:]\\(\\)\\{\\}\\<\\>\\;])"
                },
                {
                    "comment": "module identifier",
                    "name": "entity.name.function.module.ttcn",
                    "match": "(?<=[[:^word:]]from|[[:^word:]]module)\\s+([[:alpha:]][[:word:]]*)(?=[[:space:]\\{\\}\\;])"
                },
                {
                    "comment": "module identifier list",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.module.ttcn"
                        },
                        "2": {
                            "name": "entity.name.function.module.ttcn"
                        }
                    },
                    "match": "(?<=[[:^word:]]module)\\s+([[:alpha:]][[:word:]]*)\\s*,\\s*([[:alpha:]][[:word:]]*)(?=[[:space:]\\{\\}\\;])"
                },
                {
                    "comment": "modified function identifier",
                    "name": "entity.name.method.modified.ttcn",
                    "match": "(?<=@deterministic|@control)\\s+([[:alpha:]][[:word:]]*)(?=[[:space:]\\(\\)\\{\\}\\<\\>\\;])"
                }
            ]
        },
        "notations": {
            "patterns": [
                {
                    "name": "variable.parameter.assignment.ttcn",
                    "match": "(?!\\.)([[:alpha:]][[:word:]]*)\\s*(?=(\\:\\=))"
                },
                {
                    "name": "variable.parameter.assignment.square.ttcn",
                    "match": "(?!\\.)([[:alpha:]][[:word:]]*)\\s*(?=(\\[[\\S]*\\]\\s*(:\\=)))"
                },
                {
                    "name": "constant.numeric.method.square.ttcn",
                    "match": "(?<=[\\[])\\s*([[:alpha:]][[:word:]\\-\\+[:space:]]*)\\s*(?=[\\]])"
                },
                {
                    "name": "keyword.other.class.square.dot.ttcn",
                    "match": "(?<=[\\{\\(\\[\\][:space:]\\;]|^)([[:alpha:]][[:word:]]*)(?=\\[\\S+\\][\\.])"
                },
                {
                    "name": "entity.name.function.module.ttcn",
                    "match": "(?<=[\\{\\(\\[\\][:space:]\\,\\;]|^)(?!infinity|not_a_number)([[:alpha:]][[:word:]]*)(?=[\\.])"
                },
                {
                    "name": "entity.name.method.dot.ttcn",
                    "match": "(?<=[\\.])(?!infinity|not_a_number)([[:alpha:]][[:word:]]*)\\s*(?=[\\(])"
                },
                {
                    "name": "keyword.other.method.dot.ttcn",
                    "match": "(?<=[\\.])(?!infinity|not_a_number)([[:alpha:]][[:word:]]*)\\s*(?=[\\s])"
                },
                {
                    "name": "entity.name.method.round.ttcn",
                    "match": "(?<=^|[[:space:]\\{\\(\\[\\.])([[:alpha:]][[:word:]]*)\\s*(?=[\\(])(?!\\s*\\S+\\s*\\.\\.)"
                }
            ]
        },
        "type_identifier": {
            "match": "([[:alpha:]][[:word:]]*)",
            "name": "entity.name.function.module.ttcn"
        },
        "predefinde_types": {
            "comment": "predefined types",
            "name": "support.type.ttcn",
            "match": "(address|anytype|bitstring|boolean|charstring|default|float|hexstring|integer|octetstring|universal charstring|verdicttype)"
        },
        "template_restriction": {
            "name": "keyword.other.ttcn",
            "match": "(value|omit|present)"
        },
        "modifier": {
            "name": "support.constant.modifier.ttcn",
            "match": "@(abstract|control|decoded|default|deterministic|dynamic|final|fuzzy|index|lazy|local|match|mutation|mutation_o|mutation_unichar|nocase)\\b"
        },
        "numbers": {
            "patterns": [
                {
                    "comment": "integer/float/decimal format",
                    "name": "constant.numeric.digits.ttcn",
                    "match": "(-?)\\b([0-9]+)\\b"
                },
                {
                    "comment": "bitstring format",
                    "name": "constant.numeric.bitstring.ttcn",
                    "match": "'[0-1\\\\[:space:]]*'B"
                },
                {
                    "comment": "octetstring format",
                    "name": "constant.numeric.octetstring.ttcn",
                    "match": "'[^\\S]*([[:xdigit:]][^\\S]*[[:xdigit:]][^\\S]*)*'O"
                },
                {
                    "comment": "hexstring format",
                    "name": "constant.numeric.hexstring.ttcn",
                    "match": "'[[:xdigit:]\\\\[:space:]]*'H"
                },
                {
                    "comment": "exponential format",
                    "name": "constant.numeric.exponent.ttcn",
                    "match": "\\b(-?)([0-9]+E(-?)[0-9]+)\\b"
                },
                {
                    "comment": "special number: not_a_number",
                    "name": "constant.numeric.nan.ttcn",
                    "match": "(?!\\-)\\b(not_a_number)\\b"
                },
                {
                    "comment": "special number: infinity",
                    "name": "constant.numeric.infinity.ttcn",
                    "match": "(-?)\\b(infinity)\\b"
                },
                {
                    "comment": "boolean",
                    "name": "constant.numeric.boolean.ttcn",
                    "match": "(?x) \\b(true|false)\\b"
                },
                {
                    "comment": "verdicttype",
                    "name": "constant.numeric.verdict.ttcn",
                    "match": "(?x) \\b(pass|fail|inconc|none|error)\\b"
                }
            ]
        },
        "symbols": {
            "patterns": [
                {
                    "comment": "assignment operator symbol [:=]",
                    "name": "keyword.operator.new.assignment.ttcn",
                    "match": ":\\="
                },
                {
                    "comment": "communication operator symbol [->]",
                    "name": "keyword.operator.new.communication.ttcn",
                    "match": "-\\>"
                },
                {
                    "comment": "decoded field reference symbol [=>]",
                    "name": "keyword.operator.new.decode.ttcn",
                    "match": "\\=\\>"
                },
                {
                    "comment": "statement separator symbol [.;,]",
                    "name": "string.unquoted.separator.ttcn",
                    "match": "([\\.\\:\\;\\,])(?![\\.\\:\\;\\,])"
                },
                {
                    "comment": "wildcard/matching symbol [?*]",
                    "name": "constant.other.wildcard.ttcn",
                    "match": "[\\?\\*]"
                },
                {
                    "comment": "range symbol [..]",
                    "name": "string.unquoted.separator.ttcn",
                    "match": "\\.{2}"
                },
                {
                    "comment": "arithmetic operators [+-*/] (mod,rem)",
                    "name": "keyword.operator.arithmetic.ttcn",
                    "match": "\\b\\s*(\\+|-|\\*|/|mod|rem)\\s*\\b"
                },
                {
                    "comment": "string operators [&]",
                    "name": "keyword.operator.concatenation.ttcn",
                    "match": "([&])(?![&])"
                },
                {
                    "comment": "relational operators (==, !=, >, >=, <, <=)",
                    "name": "keyword.operator.relational.ttcn",
                    "match": "(\\=\\=)|(\\!\\=)|(\\s*(\\>)(\\=*)\\s*)|(\\s*(\\<)(\\=*|)(?!@)\\s*)"
                },
                {
                    "comment": "logical operators",
                    "name": "keyword.operator.logical.ttcn",
                    "match": "\\b(not|and|or|xor)\\b"
                },
                {
                    "comment": "bitwise operators",
                    "name": "keyword.operator.bitwise.ttcn",
                    "match": "\\b(not4b|and4b|or4b|xor4b)\\b"
                },
                {
                    "comment": "shift operators (<<, >>)",
                    "name": "keyword.operator.shift.ttcn",
                    "match": "(\\<\\<)|(\\>\\>)"
                },
                {
                    "comment": "rotate operators (<@, @>)",
                    "name": "keyword.operator.rotate.ttcn",
                    "match": "(\\<@)|(@\\>)"
                },
                {
                    "comment": "repetition operators (#)",
                    "name": "keyword.operator.rotate.ttcn",
                    "match": "(\\#)"
                },
                {
                    "comment": "alt operators ([])",
                    "name": "keyword.operator.alt.ttcn",
                    "match": "^\\s*(\\[\\])"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.ttcn",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.double-quote.ttcn",
                    "match": "\"\""
                },
                {
                    "name": "string.regexp.ttcn",
                    "match": "\\\\[\\\\\"bdnrstw]"
                }
            ],
            "applyEndPatternLast": 1
        },
        "comments": {
            "patterns": [
                {
                    "comment": "line comment",
                    "name": "comment.block.documentation.ttcn",
                    "match": "//.*"
                },
                {
                    "comment": "block comment",
                    "name": "comment.line.double-dash.ttcn",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "invalid": {
            "patterns": [
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^altstep|^function|^module|^testcase)\\s+([[:digit:]_][[:word:]]+)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^altstep|^function|^module|^testcase)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^altstep|^function|^module|^testcase)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^altstep|^function|^module|^testcase)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^altstep|^function|^module|^testcase)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]altstep|[[:^word:]]function|[[:^word:]]module|[[:^word:]]testcase)\\s+([[:digit:]_][[:word:]]+)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]altstep|[[:^word:]]function|[[:^word:]]module|[[:^word:]]testcase)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]altstep|[[:^word:]]function|[[:^word:]]module|[[:^word:]]testcase)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]altstep|[[:^word:]]function|[[:^word:]]module|[[:^word:]]testcase)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]altstep|[[:^word:]]function|[[:^word:]]module|[[:^word:]]testcase)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^on|^const|^from|^mtc|^system|^template|^var)\\s+((?!@)[[:digit:]_][[:word:]]+)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^on|^const|^from|^mtc|^system|^template|^var)\\s+((?!@)[[:word:]]*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^on|^const|^from|^mtc|^system|^template|^var)\\s+((?!@)\\S*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^on|^const|^from|^mtc|^system|^template|^var)\\s+((?!@)\\S*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=^on|^const|^from|^mtc|^system|^template|^var)\\s+((?!@)[[:word:]]*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]on|[[:^word:]]const|[[:^word:]]from|[[:^word:]]mtc|[[:^word:]]system|[[:^word:]]template|[[:^word:]]var)\\s+((?!@)[[:digit:]_][[:word:]]*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]on|[[:^word:]]const|[[:^word:]]from|[[:^word:]]mtc|[[:^word:]]system|[[:^word:]]template|[[:^word:]]var)\\s+((?!@)[[:word:]]*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]on|[[:^word:]]const|[[:^word:]]from|[[:^word:]]mtc|[[:^word:]]system|[[:^word:]]template|[[:^word:]]var)\\s+((?!@)\\S*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]on|[[:^word:]]const|[[:^word:]]from|[[:^word:]]mtc|[[:^word:]]system|[[:^word:]]template|[[:^word:]]var)\\s+((?!@)\\S*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=[[:^word:]]on|[[:^word:]]const|[[:^word:]]from|[[:^word:]]mtc|[[:^word:]]system|[[:^word:]]template|[[:^word:]]var)\\s+((?!@)[[:word:]]*[^[:word:][:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\.\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=@control|@deterministic)\\s+([[:digit:]_][[:word:]]+)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=@control|@deterministic)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=@control|@deterministic)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>][[:word:]]*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=@control|@deterministic)\\s+(\\S*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "name": "invalid.illegal.identifier.ttcn",
                    "match": "(?<=@control|@deterministic)\\s+([[:word:]]*[^[:word:][:space:]\\@\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>]\\S*)(?=[[:space:]\\,\\;\\(\\)\\{\\}\\[\\]\\<\\>])"
                },
                {
                    "captures": {
                        "2": {
                            "name": "keyword.other.user.ttcn"
                        },
                        "3": {
                            "name": "entity.other.user.ttcn"
                        }
                    },
                    "match": "((?!\\.)([[:alpha:]][[:word:]]*))\\s+([[:digit:]_][[:word:]]*)"
                },
                {
                    "name": "invalid.illegal.numstring.ttcn",
                    "match": "'[[:^digit:][:alpha:]0-9\\\\[:space:]]*'(B|O|H)"
                },
                {
                    "name": "invalid.illegal.symbol.ttcn",
                    "match": "[\\;\\:\\,\\&]{2,}"
                },
                {
                    "name": "invalid.illegal.impossible.ttcn",
                    "match": "$.^"
                }
            ]
        }
    },
    "scopeName": "source.ttcn"
}